
function getDirectoryURL(callback) {
    var panel = [NSOpenPanel openPanel];
    [panel setMessage:"Where do you want to save the LSR file?"];
    [panel setCanChooseDirectories: true];
    [panel setCanChooseFiles: false];
    [panel setCanCreateDirectories: true];

    [panel setTitle:"Export LSR"]
	[panel setPrompt:"Export"]

	var result = [panel runModal]
    if (result == NSFileHandlingPanelOKButton) {
		
		var URL = [panel URL];
		
        [URL startAccessingSecurityScopedResource]
        callback(URL)
		[URL stopAccessingSecurityScopedResource]
    }
}

function getArtboard(context, callback) {

	var artboardclass = NSClassFromString('MSArtboardGroup')

	var selection = context.selection
	var selectionEnumerator = [selection objectEnumerator]
	while (selectedItem = [selectionEnumerator nextObject]) {
		if ([selectedItem isKindOfClass:artboardclass]) {
			callback(selectedItem)
		}
	}
}

function enumerateSlices(artboard, callback, completion) {

	var sliceClass = NSClassFromString('MSSliceLayer')
	
	var layers = [artboard children]
	var layerEnumerator = [layers objectEnumerator]
	while (layer = [layerEnumerator nextObject]) {
		if ([layer isKindOfClass:sliceClass]) {
			callback(layer)
		}
	}
	
	completion()
}

function createLSR(URL) {
	
	var zipURL = [URL URLByAppendingPathExtension:"zip"]
	var lsrURL = [URL URLByAppendingPathExtension:"lsr"]

	var task = [NSTask new]
	[task setCurrentDirectoryPath:[URL path]]
	[task setLaunchPath:"/usr/bin/zip"]
	var argsArray = [NSArray arrayWithObjects:"-r", "-q", [zipURL path], ".", "-i", "*", nil]
	[task setArguments:argsArray]
	[task launch]
	[task waitUntilExit]

	var fileManager = [NSFileManager new]
	[fileManager moveItemAtURL:zipURL toURL:lsrURL error:nil]
	[fileManager removeItemAtURL:URL error:nil]
}

function saveJSONToURL(JSON, URL) {
	var data = [NSJSONSerialization dataWithJSONObject:JSON options:NSJSONWritingPrettyPrinted error:nil]
	var fileManager = [NSFileManager defaultManager]
	[fileManager createFileAtPath:[URL path] contents:data attributes:nil]
}

function onRun(context) {
	
	var document = context.document
	
	getDirectoryURL(function(URL) {
			
		getArtboard(context, function(artboard) {
			
			// log("Processing artboard: " + artboard)
			
			var exportSizes = [[artboard exportOptions] sizes]
			var sizeCount = [exportSizes count]
			for (var s = 0; s < [exportSizes count]; s++) {
							
				var size = [exportSizes objectAtIndex:s]
				var scale = [size scale]
				var width = [[artboard absoluteRect] width] * scale
				var height = [[artboard absoluteRect] height] * scale

				var exportURL = [URL URLByAppendingPathComponent:[artboard name] + [size name]]
				var layers = [NSMutableArray new]
				
				enumerateSlices(artboard, function(slice) {
				
					var layerName = [slice name] + ".imagestacklayer"
					var layerURL = [exportURL URLByAppendingPathComponent:layerName]
					
					var imagesetURL = [layerURL URLByAppendingPathComponent:"Content.imageset"]
					
					var imageName = [slice name] + ".png"
					var imageURL = [imagesetURL URLByAppendingPathComponent:imageName]
					
					var imagesetJSONURL = [imagesetURL URLByAppendingPathComponent:"Contents.json"]
					var layerJSONURL = [layerURL URLByAppendingPathComponent:"Contents.json"]

					// Export slice
					var exportSlice = [[MSSliceMaker slicesFromExportableLayer:slice] firstObject]
					[exportSlice setScale:scale]
					
					[document saveArtboardOrSlice:exportSlice toFile:[imageURL path]]

					// Add layer
					var layer = [NSDictionary dictionaryWithObject:layerName forKey:"filename"]
					[layers insertObject:layer atIndex:0]
					
					// Create imageset Contents.json

					var images = [NSMutableArray new]
					[images addObject:imageJSON(imageName)]

					var imagesetJSON = [NSMutableDictionary new]
					[imagesetJSON setObject:images forKey:"images"]
					[imagesetJSON setObject:infoJSON() forKey:"info"]
					saveJSONToURL(imagesetJSON, imagesetJSONURL)
					
					// Create imagestacklayer Contents.json
					saveJSONToURL(layerJSON(width, height), layerJSONURL)

				}, function() {

					var canvasSize = [NSMutableDictionary new]
					[canvasSize setObject:width forKey:"width"]
					[canvasSize setObject:height forKey:"height"]

					var properties = [NSMutableDictionary new]
					[properties setObject:canvasSize forKey:"canvasSize"]

					var LSRJSON = [NSMutableDictionary new]
					[LSRJSON setObject:layers forKey:"layers"]
					[LSRJSON setObject:infoJSON() forKey:"info"]
					[LSRJSON setObject:properties forKey:"properties"]

					var LSRJSONURL = [exportURL URLByAppendingPathComponent:"Contents.json"]
					saveJSONToURL(LSRJSON, LSRJSONURL)
				
					createLSR(exportURL)
				})
			}
		})	
	})
}

function infoJSON() {
	var infoJSON = [NSMutableDictionary new]
	[infoJSON setObject:1 forKey:"version"]
	[infoJSON setObject:"xcode" forKey:"author"]
	// log("info: " + infoJSON)
	return [infoJSON copy]
}

function imageJSON(filename) {
	var imageJSON = [NSMutableDictionary new]
	[imageJSON setObject:"tv" forKey:"idiom"]
	[imageJSON setObject:filename forKey:"filename"]
	[imageJSON setObject:"1x" forKey:"scale"]
	// log("image: " + imageJSON)
	return [imageJSON copy]
}

function sizeJSON(width, height) {
	var sizeJSON = [NSMutableDictionary new]
	[sizeJSON setObject:width forKey:"width"]
	[sizeJSON setObject:height forKey:"height"]
	// log("size: " + sizeJSON)
	return [sizeJSON copy]
}

function pointJSON(x, y) {
	var pointJSON = [NSMutableDictionary new]
	[pointJSON setObject:x forKey:"x"]
	[pointJSON setObject:y forKey:"y"]
	// log("point: " + pointJSON)
	return [pointJSON copy]
}

function propertiesJSON(width, height) {
	var size = sizeJSON(width, height)
	var center = pointJSON(width/2, height/2)
	var propertiesJSON = [NSMutableDictionary new]
	[propertiesJSON setObject:size forKey:"frame-size"]
	[propertiesJSON setObject:center forKey:"frame-center"]
	// log("properties: " + propertiesJSON)
	return [propertiesJSON copy]
}

function layerJSON(width, height) {
	var layerJSON = [NSMutableDictionary new]
	var info = infoJSON()
	[layerJSON setObject:info forKey:"info"]

	// TODO: Explain this!!
	[layerJSON removeObjectForKey:"author"]
	[layerJSON removeObjectForKey:"version"]
	
	var properties = propertiesJSON(width, height)
	[layerJSON setObject:properties forKey:"properties"]
	return [layerJSON copy]
}
